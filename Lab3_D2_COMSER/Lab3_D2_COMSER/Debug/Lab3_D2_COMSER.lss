
Lab3_D2_COMSER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  000004a6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001b6  008001b6  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e10  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000932  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000726  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000417  00000000  00000000  00002cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	99 01       	movw	r18, r18
  6a:	a0 01       	movw	r20, r0
  6c:	a7 01       	movw	r20, r14
  6e:	b1 01       	movw	r22, r2
  70:	bb 01       	movw	r22, r22
  72:	c5 01       	movw	r24, r10
  74:	cf 01       	movw	r24, r30

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 ea       	ldi	r30, 0xA6	; 166
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 3b       	cpi	r26, 0xB6	; 182
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a6 eb       	ldi	r26, 0xB6	; 182
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 3b       	cpi	r26, 0xB7	; 183
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  ac:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <initUART9600>:

//recive un caracter
char ReceivP(void) {
    while (!(UCSR0A & (1 << RXC0)));
    return UDR0;
}
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ca:	08 95       	ret

000000cc <setup>:
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	8c 6d       	ori	r24, 0xDC	; 220
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	83 72       	andi	r24, 0x23	; 35
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8c 7f       	andi	r24, 0xFC	; 252
  e2:	84 b9       	out	0x04, r24	; 4
  e4:	28 e0       	ldi	r18, 0x08	; 8
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	82 e5       	ldi	r24, 0x52	; 82
  ec:	0e 94 81 01 	call	0x302	; 0x302 <spiInit>
  f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <initUART9600>
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <refreshPORT>:
  f8:	88 23       	and	r24, r24
  fa:	24 f4       	brge	.+8      	; 0x104 <refreshPORT+0xc>
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	91 60       	ori	r25, 0x01	; 1
 100:	95 b9       	out	0x05, r25	; 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <refreshPORT+0x12>
 104:	95 b1       	in	r25, 0x05	; 5
 106:	9e 7f       	andi	r25, 0xFE	; 254
 108:	95 b9       	out	0x05, r25	; 5
 10a:	86 ff       	sbrs	r24, 6
 10c:	04 c0       	rjmp	.+8      	; 0x116 <refreshPORT+0x1e>
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	92 60       	ori	r25, 0x02	; 2
 112:	95 b9       	out	0x05, r25	; 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <refreshPORT+0x24>
 116:	95 b1       	in	r25, 0x05	; 5
 118:	9d 7f       	andi	r25, 0xFD	; 253
 11a:	95 b9       	out	0x05, r25	; 5
 11c:	85 ff       	sbrs	r24, 5
 11e:	04 c0       	rjmp	.+8      	; 0x128 <refreshPORT+0x30>
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	94 60       	ori	r25, 0x04	; 4
 124:	9b b9       	out	0x0b, r25	; 11
 126:	03 c0       	rjmp	.+6      	; 0x12e <refreshPORT+0x36>
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	9b 7f       	andi	r25, 0xFB	; 251
 12c:	9b b9       	out	0x0b, r25	; 11
 12e:	84 ff       	sbrs	r24, 4
 130:	04 c0       	rjmp	.+8      	; 0x13a <refreshPORT+0x42>
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	98 60       	ori	r25, 0x08	; 8
 136:	9b b9       	out	0x0b, r25	; 11
 138:	03 c0       	rjmp	.+6      	; 0x140 <refreshPORT+0x48>
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	97 7f       	andi	r25, 0xF7	; 247
 13e:	9b b9       	out	0x0b, r25	; 11
 140:	83 ff       	sbrs	r24, 3
 142:	04 c0       	rjmp	.+8      	; 0x14c <refreshPORT+0x54>
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	90 61       	ori	r25, 0x10	; 16
 148:	9b b9       	out	0x0b, r25	; 11
 14a:	03 c0       	rjmp	.+6      	; 0x152 <refreshPORT+0x5a>
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	9f 7e       	andi	r25, 0xEF	; 239
 150:	9b b9       	out	0x0b, r25	; 11
 152:	82 ff       	sbrs	r24, 2
 154:	04 c0       	rjmp	.+8      	; 0x15e <refreshPORT+0x66>
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	90 62       	ori	r25, 0x20	; 32
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	03 c0       	rjmp	.+6      	; 0x164 <refreshPORT+0x6c>
 15e:	9b b1       	in	r25, 0x0b	; 11
 160:	9f 7d       	andi	r25, 0xDF	; 223
 162:	9b b9       	out	0x0b, r25	; 11
 164:	81 ff       	sbrs	r24, 1
 166:	04 c0       	rjmp	.+8      	; 0x170 <refreshPORT+0x78>
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	90 64       	ori	r25, 0x40	; 64
 16c:	9b b9       	out	0x0b, r25	; 11
 16e:	03 c0       	rjmp	.+6      	; 0x176 <refreshPORT+0x7e>
 170:	9b b1       	in	r25, 0x0b	; 11
 172:	9f 7b       	andi	r25, 0xBF	; 191
 174:	9b b9       	out	0x0b, r25	; 11
 176:	80 ff       	sbrs	r24, 0
 178:	04 c0       	rjmp	.+8      	; 0x182 <refreshPORT+0x8a>
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	08 95       	ret
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8f 77       	andi	r24, 0x7F	; 127
 186:	8b b9       	out	0x0b, r24	; 11
 188:	08 95       	ret

0000018a <MandarP>:
 18a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	95 ff       	sbrs	r25, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <MandarP>
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 196:	08 95       	ret

00000198 <CadenChar>:

// Envía una cadena de texto
void CadenChar(const char *str) {
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
    while (*str) {
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <CadenChar+0xe>
        MandarP(*str++);
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	0e 94 c5 00 	call	0x18a	; 0x18a <MandarP>
    return UDR0;
}

// Envía una cadena de texto
void CadenChar(const char *str) {
    while (*str) {
 1a6:	88 81       	ld	r24, Y
 1a8:	81 11       	cpse	r24, r1
 1aa:	fa cf       	rjmp	.-12     	; 0x1a0 <CadenChar+0x8>
        MandarP(*str++);
    }
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <Binario>:

// Convierte un número a binario
void Binario(uint8_t valor) {
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	18 2f       	mov	r17, r24
	for (int i = 7; i >= 0; i--) {
 1ba:	c7 e0       	ldi	r28, 0x07	; 7
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	10 c0       	rjmp	.+32     	; 0x1e0 <Binario+0x2e>
		MandarP((valor & (1 << i)) ? '1' : '0');
 1c0:	81 2f       	mov	r24, r17
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0c 2e       	mov	r0, r28
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Binario+0x1a>
 1c8:	95 95       	asr	r25
 1ca:	87 95       	ror	r24
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <Binario+0x16>
 1d0:	80 ff       	sbrs	r24, 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <Binario+0x26>
 1d4:	81 e3       	ldi	r24, 0x31	; 49
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <Binario+0x28>
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 c5 00 	call	0x18a	; 0x18a <MandarP>
    }
}

// Convierte un número a binario
void Binario(uint8_t valor) {
	for (int i = 7; i >= 0; i--) {
 1de:	21 97       	sbiw	r28, 0x01	; 1
 1e0:	dd 23       	and	r29, r29
 1e2:	74 f7       	brge	.-36     	; 0x1c0 <Binario+0xe>
		MandarP((valor & (1 << i)) ? '1' : '0');
	}
	CadenChar("\r\n");
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 cc 00 	call	0x198	; 0x198 <CadenChar>
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	08 95       	ret

000001f4 <InterDeTeclas>:


int InterDeTeclas() {
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <InterDeTeclas+0xa>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <InterDeTeclas+0xc>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	char buffer[4] = {0};   // Almacena hasta 3 dígitos
 204:	19 82       	std	Y+1, r1	; 0x01
 206:	1a 82       	std	Y+2, r1	; 0x02
 208:	1b 82       	std	Y+3, r1	; 0x03
 20a:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t index = 0;
 20c:	00 e0       	ldi	r16, 0x00	; 0
	char received;

	while (1) {
		while (!(UCSR0A & (1 << RXC0)));  // Espera un dato (¡Aquí puede trabarse!)
 20e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 212:	88 23       	and	r24, r24
 214:	e4 f7       	brge	.-8      	; 0x20e <InterDeTeclas+0x1a>
		
		received = UDR0;  // Lee el dato recibido
 216:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		MandarP(received); // Imprime lo que recibe (eco)
 21a:	81 2f       	mov	r24, r17
 21c:	0e 94 c5 00 	call	0x18a	; 0x18a <MandarP>

		// Si encuentra '+', termina
		if (received == '+') {
 220:	1b 32       	cpi	r17, 0x2B	; 43
 222:	c1 f1       	breq	.+112    	; 0x294 <InterDeTeclas+0xa0>
			break;
		}

		// Acepta solo dígitos (0-9)
		if (received >= '0' && received <= '9' && index < 3) {
 224:	80 ed       	ldi	r24, 0xD0	; 208
 226:	81 0f       	add	r24, r17
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	50 f4       	brcc	.+20     	; 0x240 <InterDeTeclas+0x4c>
 22c:	03 30       	cpi	r16, 0x03	; 3
 22e:	40 f4       	brcc	.+16     	; 0x240 <InterDeTeclas+0x4c>
			buffer[index++] = received;  // Guarda el número
 230:	e1 e0       	ldi	r30, 0x01	; 1
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ec 0f       	add	r30, r28
 236:	fd 1f       	adc	r31, r29
 238:	e0 0f       	add	r30, r16
 23a:	f1 1d       	adc	r31, r1
 23c:	10 83       	st	Z, r17
 23e:	0f 5f       	subi	r16, 0xFF	; 255
		}
		if (received == 'x')
 240:	18 37       	cpi	r17, 0x78	; 120
 242:	29 f7       	brne	.-54     	; 0x20e <InterDeTeclas+0x1a>
 244:	1e c0       	rjmp	.+60     	; 0x282 <InterDeTeclas+0x8e>
		{
			for (int i=0; i<=2; i++)
			{
				PORTB &= ~(1 << PORTB2);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	85 b9       	out	0x05, r24	; 5
				spiWrite('x');
 24c:	88 e7       	ldi	r24, 0x78	; 120
 24e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <spiWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	84 e3       	ldi	r24, 0x34	; 52
 256:	9c e0       	ldi	r25, 0x0C	; 12
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <InterDeTeclas+0x64>
 260:	00 c0       	rjmp	.+0      	; 0x262 <InterDeTeclas+0x6e>
 262:	00 00       	nop
				_delay_ms(250);
				valorSPI = spiRead();
 264:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <spiRead>
 268:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
				MandarP(valorSPI);
 26c:	0e 94 c5 00 	call	0x18a	; 0x18a <MandarP>
				MandarP('a');
 270:	81 e6       	ldi	r24, 0x61	; 97
 272:	0e 94 c5 00 	call	0x18a	; 0x18a <MandarP>

				PORTB |= (1 << PORTB2);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	85 b9       	out	0x05, r24	; 5
		if (received >= '0' && received <= '9' && index < 3) {
			buffer[index++] = received;  // Guarda el número
		}
		if (received == 'x')
		{
			for (int i=0; i<=2; i++)
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
 280:	02 c0       	rjmp	.+4      	; 0x286 <InterDeTeclas+0x92>
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	03 30       	cpi	r16, 0x03	; 3
 288:	11 05       	cpc	r17, r1
 28a:	ec f2       	brlt	.-70     	; 0x246 <InterDeTeclas+0x52>

				PORTB |= (1 << PORTB2);
				//_delay_ms(250);
				
			}
			CadenChar(" \r\npot1 \r\n");
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 cc 00 	call	0x198	; 0x198 <CadenChar>
			break;
		}
	}

	return (uint8_t)atoi(buffer);  // Convierte a entero
 294:	ce 01       	movw	r24, r28
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	0e 94 f6 01 	call	0x3ec	; 0x3ec <atoi>
}
 29c:	99 27       	eor	r25, r25
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <main>:
// Main
//********************************************************************************************************************************************


int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <main+0x6>
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <main+0x8>
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	setup();
 2bc:	0e 94 66 00 	call	0xcc	; 0xcc <setup>

	 while (1) {
		 CadenChar("Introduce un numero seguido de '+'- si quieres su binario:\r\n");
 2c0:	8b e0       	ldi	r24, 0x0B	; 11
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 cc 00 	call	0x198	; 0x198 <CadenChar>
		CadenChar("Introduce una 'x' si quieres saber el pot 1:\r\n");
 2c8:	88 e4       	ldi	r24, 0x48	; 72
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 cc 00 	call	0x198	; 0x198 <CadenChar>
		CadenChar("Introduce una 'c' si quieres saber el pot 2:\r\n");
 2d0:	87 e7       	ldi	r24, 0x77	; 119
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 cc 00 	call	0x198	; 0x198 <CadenChar>
	
		 uint8_t numerito = InterDeTeclas(); // Leer número
 2d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <InterDeTeclas>
 2dc:	18 2f       	mov	r17, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2de:	4a e0       	ldi	r20, 0x0A	; 10
 2e0:	be 01       	movw	r22, r28
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 14 02 	call	0x428	; 0x428 <__itoa_ncheck>
		 itoa(numerito, str, 10);
		 //CadenChar(str);
		 //CadenChar("\r\n");

		 // Imprime el número en binario
		 CadenChar("En binario: 0b");
 2ec:	86 ea       	ldi	r24, 0xA6	; 166
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 cc 00 	call	0x198	; 0x198 <CadenChar>
		 Binario(numerito);
 2f4:	81 2f       	mov	r24, r17
 2f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Binario>
		 refreshPORT(numerito);
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 7c 00 	call	0xf8	; 0xf8 <refreshPORT>
 300:	df cf       	rjmp	.-66     	; 0x2c0 <main+0x10>

00000302 <spiInit>:
	if((SPSR & (1 << SPIF))){
		return 1;
	}else{
		return 0;
	}
}
 302:	e8 2f       	mov	r30, r24
 304:	84 ff       	sbrs	r24, 4
 306:	55 c0       	rjmp	.+170    	; 0x3b2 <spiInit+0xb0>
 308:	84 b1       	in	r24, 0x04	; 4
 30a:	8c 62       	ori	r24, 0x2C	; 44
 30c:	84 b9       	out	0x04, r24	; 4
 30e:	84 b1       	in	r24, 0x04	; 4
 310:	8f 7e       	andi	r24, 0xEF	; 239
 312:	84 b9       	out	0x04, r24	; 4
 314:	8c b5       	in	r24, 0x2c	; 44
 316:	80 61       	ori	r24, 0x10	; 16
 318:	8c bd       	out	0x2c, r24	; 44
 31a:	e7 70       	andi	r30, 0x07	; 7
 31c:	8e 2f       	mov	r24, r30
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	87 30       	cpi	r24, 0x07	; 7
 322:	91 05       	cpc	r25, r1
 324:	08 f0       	brcs	.+2      	; 0x328 <spiInit+0x26>
 326:	4e c0       	rjmp	.+156    	; 0x3c4 <spiInit+0xc2>
 328:	fc 01       	movw	r30, r24
 32a:	ec 5c       	subi	r30, 0xCC	; 204
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__tablejump2__>
 332:	8c b5       	in	r24, 0x2c	; 44
 334:	8c 7f       	andi	r24, 0xFC	; 252
 336:	8c bd       	out	0x2c, r24	; 44
 338:	8d b5       	in	r24, 0x2d	; 45
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	8d bd       	out	0x2d, r24	; 45
 33e:	42 c0       	rjmp	.+132    	; 0x3c4 <spiInit+0xc2>
 340:	8c b5       	in	r24, 0x2c	; 44
 342:	8c 7f       	andi	r24, 0xFC	; 252
 344:	8c bd       	out	0x2c, r24	; 44
 346:	8d b5       	in	r24, 0x2d	; 45
 348:	8e 7f       	andi	r24, 0xFE	; 254
 34a:	8d bd       	out	0x2d, r24	; 45
 34c:	3b c0       	rjmp	.+118    	; 0x3c4 <spiInit+0xc2>
 34e:	8c b5       	in	r24, 0x2c	; 44
 350:	81 60       	ori	r24, 0x01	; 1
 352:	8c bd       	out	0x2c, r24	; 44
 354:	8c b5       	in	r24, 0x2c	; 44
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	8c bd       	out	0x2c, r24	; 44
 35a:	8d b5       	in	r24, 0x2d	; 45
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	8d bd       	out	0x2d, r24	; 45
 360:	31 c0       	rjmp	.+98     	; 0x3c4 <spiInit+0xc2>
 362:	8c b5       	in	r24, 0x2c	; 44
 364:	81 60       	ori	r24, 0x01	; 1
 366:	8c bd       	out	0x2c, r24	; 44
 368:	8c b5       	in	r24, 0x2c	; 44
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	8c bd       	out	0x2c, r24	; 44
 36e:	8d b5       	in	r24, 0x2d	; 45
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	8d bd       	out	0x2d, r24	; 45
 374:	27 c0       	rjmp	.+78     	; 0x3c4 <spiInit+0xc2>
 376:	8c b5       	in	r24, 0x2c	; 44
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	8c bd       	out	0x2c, r24	; 44
 37c:	8c b5       	in	r24, 0x2c	; 44
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	8c bd       	out	0x2c, r24	; 44
 382:	8d b5       	in	r24, 0x2d	; 45
 384:	81 60       	ori	r24, 0x01	; 1
 386:	8d bd       	out	0x2d, r24	; 45
 388:	1d c0       	rjmp	.+58     	; 0x3c4 <spiInit+0xc2>
 38a:	8c b5       	in	r24, 0x2c	; 44
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	8c bd       	out	0x2c, r24	; 44
 390:	8c b5       	in	r24, 0x2c	; 44
 392:	82 60       	ori	r24, 0x02	; 2
 394:	8c bd       	out	0x2c, r24	; 44
 396:	8d b5       	in	r24, 0x2d	; 45
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	8d bd       	out	0x2d, r24	; 45
 39c:	13 c0       	rjmp	.+38     	; 0x3c4 <spiInit+0xc2>
 39e:	8c b5       	in	r24, 0x2c	; 44
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	8c bd       	out	0x2c, r24	; 44
 3a4:	8c b5       	in	r24, 0x2c	; 44
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	8c bd       	out	0x2c, r24	; 44
 3aa:	8d b5       	in	r24, 0x2d	; 45
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	8d bd       	out	0x2d, r24	; 45
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <spiInit+0xc2>
 3b2:	84 b1       	in	r24, 0x04	; 4
 3b4:	83 7d       	andi	r24, 0xD3	; 211
 3b6:	84 b9       	out	0x04, r24	; 4
 3b8:	84 b1       	in	r24, 0x04	; 4
 3ba:	80 61       	ori	r24, 0x10	; 16
 3bc:	84 b9       	out	0x04, r24	; 4
 3be:	8c b5       	in	r24, 0x2c	; 44
 3c0:	8f 7e       	andi	r24, 0xEF	; 239
 3c2:	8c bd       	out	0x2c, r24	; 44
 3c4:	8c b5       	in	r24, 0x2c	; 44
 3c6:	46 2b       	or	r20, r22
 3c8:	24 2b       	or	r18, r20
 3ca:	28 2b       	or	r18, r24
 3cc:	20 64       	ori	r18, 0x40	; 64
 3ce:	2c bd       	out	0x2c, r18	; 44
 3d0:	08 95       	ret

000003d2 <spiWrite>:
 3d2:	8e bd       	out	0x2e, r24	; 46
 3d4:	08 95       	ret

000003d6 <spiRead>:

char spiRead(){
	//Read the received data
	while (!(SPSR & (1 << SPIF))); //Wait for Data Recieve Complete
 3d6:	0d b4       	in	r0, 0x2d	; 45
 3d8:	07 fe       	sbrs	r0, 7
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <spiRead>
	return(SPDR);				   //Read the received data from the buffer
 3dc:	8e b5       	in	r24, 0x2e	; 46
	
}
 3de:	08 95       	ret

000003e0 <__tablejump2__>:
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	05 90       	lpm	r0, Z+
 3e6:	f4 91       	lpm	r31, Z
 3e8:	e0 2d       	mov	r30, r0
 3ea:	09 94       	ijmp

000003ec <atoi>:
 3ec:	fc 01       	movw	r30, r24
 3ee:	88 27       	eor	r24, r24
 3f0:	99 27       	eor	r25, r25
 3f2:	e8 94       	clt
 3f4:	21 91       	ld	r18, Z+
 3f6:	20 32       	cpi	r18, 0x20	; 32
 3f8:	e9 f3       	breq	.-6      	; 0x3f4 <atoi+0x8>
 3fa:	29 30       	cpi	r18, 0x09	; 9
 3fc:	10 f0       	brcs	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	2e 30       	cpi	r18, 0x0E	; 14
 400:	c8 f3       	brcs	.-14     	; 0x3f4 <atoi+0x8>
 402:	2b 32       	cpi	r18, 0x2B	; 43
 404:	41 f0       	breq	.+16     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 406:	2d 32       	cpi	r18, 0x2D	; 45
 408:	39 f4       	brne	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40a:	68 94       	set
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulhi_const_10>
 412:	82 0f       	add	r24, r18
 414:	91 1d       	adc	r25, r1
 416:	21 91       	ld	r18, Z+
 418:	20 53       	subi	r18, 0x30	; 48
 41a:	2a 30       	cpi	r18, 0x0A	; 10
 41c:	c0 f3       	brcs	.-16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 41e:	1e f4       	brtc	.+6      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 420:	90 95       	com	r25
 422:	81 95       	neg	r24
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	08 95       	ret

00000428 <__itoa_ncheck>:
 428:	bb 27       	eor	r27, r27
 42a:	4a 30       	cpi	r20, 0x0A	; 10
 42c:	31 f4       	brne	.+12     	; 0x43a <__itoa_ncheck+0x12>
 42e:	99 23       	and	r25, r25
 430:	22 f4       	brpl	.+8      	; 0x43a <__itoa_ncheck+0x12>
 432:	bd e2       	ldi	r27, 0x2D	; 45
 434:	90 95       	com	r25
 436:	81 95       	neg	r24
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	0c 94 28 02 	jmp	0x450	; 0x450 <__utoa_common>

0000043e <__mulhi_const_10>:
 43e:	7a e0       	ldi	r23, 0x0A	; 10
 440:	97 9f       	mul	r25, r23
 442:	90 2d       	mov	r25, r0
 444:	87 9f       	mul	r24, r23
 446:	80 2d       	mov	r24, r0
 448:	91 0d       	add	r25, r1
 44a:	11 24       	eor	r1, r1
 44c:	08 95       	ret

0000044e <__utoa_ncheck>:
 44e:	bb 27       	eor	r27, r27

00000450 <__utoa_common>:
 450:	fb 01       	movw	r30, r22
 452:	55 27       	eor	r21, r21
 454:	aa 27       	eor	r26, r26
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	aa 1f       	adc	r26, r26
 45c:	a4 17       	cp	r26, r20
 45e:	10 f0       	brcs	.+4      	; 0x464 <__utoa_common+0x14>
 460:	a4 1b       	sub	r26, r20
 462:	83 95       	inc	r24
 464:	50 51       	subi	r21, 0x10	; 16
 466:	b9 f7       	brne	.-18     	; 0x456 <__utoa_common+0x6>
 468:	a0 5d       	subi	r26, 0xD0	; 208
 46a:	aa 33       	cpi	r26, 0x3A	; 58
 46c:	08 f0       	brcs	.+2      	; 0x470 <__utoa_common+0x20>
 46e:	a9 5d       	subi	r26, 0xD9	; 217
 470:	a1 93       	st	Z+, r26
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	79 f7       	brne	.-34     	; 0x454 <__utoa_common+0x4>
 476:	b1 11       	cpse	r27, r1
 478:	b1 93       	st	Z+, r27
 47a:	11 92       	st	Z+, r1
 47c:	cb 01       	movw	r24, r22
 47e:	0c 94 41 02 	jmp	0x482	; 0x482 <strrev>

00000482 <strrev>:
 482:	dc 01       	movw	r26, r24
 484:	fc 01       	movw	r30, r24
 486:	67 2f       	mov	r22, r23
 488:	71 91       	ld	r23, Z+
 48a:	77 23       	and	r23, r23
 48c:	e1 f7       	brne	.-8      	; 0x486 <strrev+0x4>
 48e:	32 97       	sbiw	r30, 0x02	; 2
 490:	04 c0       	rjmp	.+8      	; 0x49a <strrev+0x18>
 492:	7c 91       	ld	r23, X
 494:	6d 93       	st	X+, r22
 496:	70 83       	st	Z, r23
 498:	62 91       	ld	r22, -Z
 49a:	ae 17       	cp	r26, r30
 49c:	bf 07       	cpc	r27, r31
 49e:	c8 f3       	brcs	.-14     	; 0x492 <strrev+0x10>
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
